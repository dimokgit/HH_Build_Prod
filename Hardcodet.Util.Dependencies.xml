<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hardcodet.Util.Dependencies</name>
    </assembly>
    <members>
        <member name="T:Hardcodet.Util.Dependencies.BindingConverters">
            <summary>
            Provides common converter functions that can be assigned
            to converters of a <see cref="T:Hardcodet.Util.Dependencies.LambdaBinding"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.BindingConverters.BoolInversionConverter">
            <summary>
            Performs simple inversion of a boolean value.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.BindingConverters.NullableToBoolConverter">
            <summary>
            Converts a nullable boolean into a regular bool, and returns
            <c>false</c> if the nullable does not provide a value.
            </summary>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.DependencyChangeSource">
            <summary>
            Change flags that indicate the source of a change in a given
            dependency chain.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyChangeSource.TargetValueChange">
            <summary>
            The targeted value (<see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/>)
            was changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyChangeSource.SubValueChanged">
            <summary>
            The dependency graph did not change, but the target item implements
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> and a property of the targeted
            item itself was changed.<br/>
            This change type is only possible if
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.ObserveSubValueChanges"/>
            is set to true.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyChangeSource.DependencyGraphChange">
            <summary>
            The dependency chain was changed, which means that chain's
            leaf node now targets to a different reference or value.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyChangeSource.ChainBroken">
            <summary>
            The dependency chain was broken (e.g. because a reference in the
            chain was set to null). The targeted value cannot
            be resolved.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyChangeSource.TargetCollectionChange">
            <summary>
            If the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/> is a collection that
            was changed updated. Requires the collection to implement
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.<br/>
            This change type is only possible if
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.ObserveSubValueChanges"/>
            is set to true.
            </summary>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.DependencyNode">
            <summary>
            Abstract base class for concrete dependency nodes
            (<see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/>). Provides
            builder methods and can be used to store nodes of different
            types (e.g. DependencyNode{int} vs. DependencyNode{string}
            in a single collection.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode.Create``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates dependency chain of <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/> instances for a given
            expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="target">The expression that declares the dependency chain from root
            to the target item or value.</param>
            <returns>The root dependency node, that links to the targeted item.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode.Create``1(System.Linq.Expressions.Expression{System.Func{``0}},System.EventHandler{Hardcodet.Util.Dependencies.DependencyChangeEventArgs{``0}})">
            <summary>
            Creates dependency chain of <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/> instances for a given
            expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="target">The expression that declares the dependency chain from root
            to the target item or value.</param>
            <param name="changeHandler">An optional event listener that is being invoked if the
            target value changes either through direct change, or because the dependency graph
            was changed because of a changed intermediary node.</param>
            <returns>The root dependency node, that links to the targeted item.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode.Create``1(Hardcodet.Util.Dependencies.DependencyNodeSettings{``0})">
            <summary>
            Creates dependency chain of <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/> instances for a given
            expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="settings">Settings that define the dependency graph, change listeners
            and monitoring behaviour.</param>
            <returns>The root dependency node, that links to the targeted item.</returns>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.DependencyNode`1">
            <summary>
            Represents a single node in a given expression chain
            that is observed in order to keep track of a specified
            item, which is reflected through the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/>
            of the node trail.
            </summary>
            <typeparam name="T">The type of the targeted item. This is the
            value of the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/>, which can be retrieved
            from every node in the chain through the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/>
            property.</typeparam>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.nodeValue">
            <summary>
            Holds a weak reference to the item of the dependency
            chain that is being represented by this node.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.syncRoot">
            <summary>
            Synchronization token.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.childNode">
            <summary>
            The next child item of the expression tree. Is null
            if this node instance is the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/>
            of the dependency chain.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.collectionChangeHandler">
            <summary>
            The event handler that is submitted to the <see cref="F:Hardcodet.Util.Dependencies.DependencyNode`1.weakCollectionChangeListener"/>.
            Needs to be cached or it will go out of scope due to weak references;
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.propertyChangeHandler">
            <summary>
            The event handler that is submitted to the <see cref="F:Hardcodet.Util.Dependencies.DependencyNode`1.weakPropertyChangeListener"/>.
            Needs to be cached or it will go out of scope due to weak references;
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.dependencyChangedEvent">
            <summary>
            A weak event that is used to track listeners to the
            <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> event.
            </summary>
        </member>
        <member name="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged">
            <summary>
            Fired whenever a change is being detected for this node or
            one of its descendants, or if the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/>
            is set manually through the <see cref="M:Hardcodet.Util.Dependencies.DependencyNode`1.SetNodeValue(System.Object,System.Boolean)"/> method.
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.weakCollectionChangeListener">
            <summary>
            Handles collection change events, if the monitored <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/> implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </summary>
        </member>
        <member name="F:Hardcodet.Util.Dependencies.DependencyNode`1.weakPropertyChangeListener">
            <summary>
            Handles property change events of the monitored <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.ParentMember">
            <summary>
            The member that declares the this item as a child
            of its parent.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.ObserveSubValueChanges">
            <summary>
            Checks whether the targeted dependency item (the value of
            the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/> in the dependency chain) should
            be observed for changes of the item's data itself. If true,
            the <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> event will also fire
            if the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/> implements one of these
            interfaces:<br/>
            If the item implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>,
            <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> will fire if a property change
            of the target item is published.<br/>
            If the item is a collection that implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/>
            fires for every change of the collection's contents.<br/>
            Defaults to true.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeExpression">
            <summary>
            The expression was the base to create this node.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.ParentNode">
            <summary>
            The parent node of the expression tree, if the current
            node is not the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.RootNode"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.ChildNode">
            <summary>
            The next child item of the expression tree. Is null
            if this node instance is the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/> of
            the dependency chain.
            Setting this property automatically sets the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.ParentNode"/> property of the submitted child
            to this node instance.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.RootNode">
            <summary>
            Gets the root node of the observed expression tree.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.IsChainBroken">
            <summary>
            Checks whether the dependency chain of the whole graph
            (from root to leaf node) is broken.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.IsLeafNode">
            <summary>
            Checks whether the node is the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/>
            of the dependency chain.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.IsRootNode">
            <summary>
            Checks whether the node is the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.RootNode"/>
            of the dependency chain.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode">
            <summary>
            The bottom node of the expression tree, which represents the
            item that was registered for observation.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafMemberName">
            <summary>
            Gets the member name of the observed property or field, if applicable.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue">
            <summary>
            Gets the current value of the (observed) leaf node.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue">
            <summary>
            The instance of the item. Once set, all descendent
            items (starting with the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.ChildNode"/> item
            are being refreshed accordingly.<br/>
            This property can be set manually through the
            <see cref="M:Hardcodet.Util.Dependencies.DependencyNode`1.SetNodeValue(System.Object,System.Boolean)"/> method for non-observable items
            (e.g. fields, or properties that are not covered by
            property-change events of their parent).
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.#ctor(System.Boolean,System.Linq.Expressions.Expression)">
            <summary>
            Creates a new instance of the dependency node.
            </summary>
            <param name="observeSubValueChanges">Checks whether the
            targeted dependency item (the value of the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/> in the dependency chain) should
            be observed for changes of the item's data itself.</param>
            <param name="nodeExpression">The expression that defines this node.</param>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.SetNodeValue(System.Object,System.Boolean)">
            <summary>
            Allows setting the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/> manually for targeted
            objects that do not support change notificiations through the
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
            <param name="value">The value to be assigned to the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/>
            property.</param>
            <param name="fireChangeEvent">Whether to fire the
            <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> event after setting the property or not.</param>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.ResetNodeValue(System.Boolean)">
            <summary>
            Recursively resets the stored node value by resetting the
            <see cref="F:Hardcodet.Util.Dependencies.DependencyNode`1.nodeValue"/> field, and deregisters event listeners.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.RegisterListener(System.Object)">
            <summary>
            Registers a <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/>
            listener on the current <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/>,
            if the object implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invoked if the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> event
            for an observed *child node* or the leaf value is being fired. Updates the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/> of the observed child node in order
            to reflect the new property value.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Change event listener which is being invoked if this node is the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafNode"/>, which represents a collection that implements
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.ResolvePropertyValueChangeReason">
            <summary>
            Resolves the reason for a changed value.
            </summary>
            <returns>Change source flag.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.NotifyNodeChange(Hardcodet.Util.Dependencies.DependencyNode{`0},Hardcodet.Util.Dependencies.DependencyChangeSource,System.String)">
            <summary>
            Bubbles property change events up the node hierarchy, and
            fires the <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> event on every level.
            </summary>
            <param name="changedNode">The node that was changed.</param>
            <param name="reason">The reason for the change event.</param>
            <param name="propertyName">The name of the changed or updated property.</param>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.RefreshChildNodeValue">
            <summary>
            Re-evaluates the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeValue"/> of the underlying
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.ChildNode"/> through reflection.
            </summary>
            <returns>The resolved child node value, if possible. Otherwise
            null.</returns>
            <exception cref="T:System.InvalidOperationException">If the member type
            of the child item is neither a field nor a property.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.CreateNodeTrail">
            <summary>
            Helper method that creates a breadcrumb-like representation of the
            dependency chain starting with this node.
            </summary>
            <returns>Breadcrumb trail of the node and its descendants.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.FindNode``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Tries to find a child node that matches a given expression.
            </summary>
            <param name="expression">A substring of this node's qualified <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.NodeExpression"/>
            which serves as the search parameter.</param>
            <returns>The node itself or one of its descendants that match the
            submitted expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="expression"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This class is not virtual by design. Derived classes
            should override <see cref="M:Hardcodet.Util.Dependencies.DependencyNode`1.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:Hardcodet.Util.Dependencies.DependencyNode`1.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNode`1.Dispose(System.Boolean)">
            <summary>
            <c>Dispose(bool disposing)</c> executes in two distinct scenarios.
            If disposing equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">If disposing equals <c>false</c>, the method
            has been called by the runtime from inside the finalizer and you
            should not reference other objects. Only unmanaged resources can
            be disposed.</param>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.DependencyBuilder">
            <summary>
            Creates and maintains <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/>
            instances.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyBuilder.CreateDependency``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates dependency chain of <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/> instances for a given
            expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="target">The expression that declares the dependency chain from root
            to the target item or value.</param>
            <returns>The root dependency node, that links to the targeted item.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyBuilder.CreateDependency``1(System.Linq.Expressions.Expression{System.Func{``0}},System.EventHandler{Hardcodet.Util.Dependencies.DependencyChangeEventArgs{``0}})">
            <summary>
            Creates dependency chain of <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/> instances for a given
            expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="target">The expression that declares the dependency chain from root
            to the target item or value.</param>
            <param name="changeHandler">An optional event listener that is being invoked if the
            target value changes either through direct change, or because the dependency graph
            was changed because of a changed intermediary node.</param>
            <returns>The root dependency node, that links to the targeted item.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="target"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyBuilder.CreateDependency``1(Hardcodet.Util.Dependencies.DependencyNodeSettings{``0})">
            <summary>
            Creates dependency chain of <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/> instances for a given
            expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="settings">Settings that define the dependency graph, change listeners
            and monitoring behaviour.</param>
            <returns>The root dependency node, that links to the targeted item.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyBuilder.WalkExpressionTree``1(System.Linq.Expressions.Expression,System.Boolean,Hardcodet.Util.Dependencies.DependencyNode{``0})">
            <summary>
            Analyzes a given expression and returns the root <see cref="T:Hardcodet.Util.Dependencies.DependencyNode`1"/>
            of the expression.
            </summary>
            <typeparam name="T">The type of the expression's compiled return value.</typeparam>
            <param name="expression">The expression to be analyzed.</param>
            <param name="observeSubValues">Whether an observed leaf item is monitored for changes of
            its properties, too.</param>
            <param name="childNode">A previously analyzed child node, if any.</param>
            <returns>The root node of the expression chain.</returns>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1">
            <summary>
            Event arguments for a dependency's
            <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> event.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1.ChangedNode">
            <summary>
            The node that represents a changed object instance or value,
            causing a change of the dependency chain.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1.Reason">
            <summary>
            Indicates what kind of change happened in the dependency
            chain.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1.ChangedMemberName">
            <summary>
            The name of the member (usually a property) that was changed.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1.TryGetLeafValue">
            <summary>
            Gets the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/> in case of
            an intact dependency chain (as indicated by the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.IsChainBroken"/> property, or a
            given default value if the chain is broken.
            </summary>
            <returns>The leaf value of the dependency chain in case of an
            intact chain, or the default value of <typeparamref name="T"/>,
            if the chain is broken.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1.TryGetLeafValue(`0)">
            <summary>
            Gets the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/> in case of
            an intact dependency chain (as indicated by the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.IsChainBroken"/> property, or a
            given default value if the chain is broken.
            </summary>
            <param name="defaultValue">The default value to be returned if
            the dependency chain is broken.</param>
            <returns>The leaf value of the dependency chain in case of an
            intact chain, or <paramref name="defaultValue"/>, if the chain
            is broken.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1.#ctor(Hardcodet.Util.Dependencies.DependencyNode{`0},Hardcodet.Util.Dependencies.DependencyChangeSource,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Hardcodet.Util.Dependencies.DependencyChangeEventArgs`1"/>
            class.
            </summary>
            <param name="changedNode">The node that was updated and changed the
            dependency chain.</param>
            <param name="reason"></param>
            <param name="propertyName">The name of the changed property.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="changedNode"/>
            is a null reference.</exception>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.DependencyNodeSettings`1">
            <summary>
            Encapsulates settings to be used when creating
            a dependency chain through the <see cref="T:Hardcodet.Util.Dependencies.DependencyBuilder"/> 
            class.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNodeSettings`1.TargetExpression">
            <summary>
            The expression that declares the dependency chain from root
            to target.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNodeSettings`1.ChangeHandler">
            <summary>
            An optional event handler, which is registered with the root node's
            <see cref="E:Hardcodet.Util.Dependencies.DependencyNode`1.DependencyChanged"/> event.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.DependencyNodeSettings`1.ObserveSubValueChanges">
            <summary>
            Whether to observe properties or collection contents of the
            target value, if it implements either <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            or <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, respectively.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.DependencyNodeSettings`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0}})">
            <summary>
            Creates a new settings instance.
            </summary>
            <param name="targetExpression"></param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="targetExpression"/>
            is a null reference.</exception>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.IDependencyChangeInfo">
            <summary>
            Simple interface that provides untyped access
            to a changed node's core data. 
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.IDependencyChangeInfo.Reason">
            <summary>
            Indicates what kind of change happened in the dependency
            chain.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.IDependencyChangeInfo.ChangedMemberName">
            <summary>
            The name of the member (usually a property) that was changed.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.IDependencyChangeInfo.TryGetLeafValue``1(``0)">
            <summary>
            Gets the <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.LeafValue"/> in case of
            an intact dependency chain (as indicated by the
            <see cref="P:Hardcodet.Util.Dependencies.DependencyNode`1.IsChainBroken"/> property, or a
            given default value if the chain is broken.
            </summary>
            <returns>The leaf value of the dependency chain in case of an
            intact chain, or the default value of <typeparamref name="T"/>,
            if the chain is broken.</returns>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.LambdaBinding`2">
            <summary>
            Encapsulates a 
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.SourceDependency">
            <summary>
            Observes the object graph that makes the binding source.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.TargetDependency">
            <summary>
            Observes the object graph that makes the binding target.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.DefaultValue">
            <summary>
            The default value that is being assigned to the
            binding target if the source dependency is being
            broken. If not set, the the default value (e.g. null)
            of the target type is being assigned to the binding
            target.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.ForwardConverter">
            <summary>
            An optional converter that is used in one-way or two-way binding
            scenarios to convert a source value into a value that is being
            assigned to the binding target.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.ReverseConverter">
            <summary>
            An optional converter that is used in two-way binding scenarios
            to convert a target value into a value that is being assigned
            to the binding source.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.TargetMember">
            <summary>
            Points to the targeted member.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.SourceMember">
            <summary>
            Points to the member that provides the source value.
            </summary>
        </member>
        <member name="P:Hardcodet.Util.Dependencies.LambdaBinding`2.IsTwoWayBinding">
            <summary>
            Indicates whether updates flow only from source to target
            or in both directions.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0}},System.Linq.Expressions.Expression{System.Func{`1}},System.Boolean)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="isTwoWayBinding"></param>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding`2.OnSourceChanged(System.Object,Hardcodet.Util.Dependencies.DependencyChangeEventArgs{`0})">
            <summary>
            Event listener that is being invoked in one-way and two-way binding
            scenarios whenever the source node value is being changed.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding`2.OnTargetChanged(System.Object,Hardcodet.Util.Dependencies.DependencyChangeEventArgs{`1})">
            <summary>
            Event listener that is being invoked in two-way binding scenarios whenever
            the target node value is being changed.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding`2.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Updates an object's given member with a specified value.
            </summary>
            <param name="memberInfo">Provides information about the member
            (field or property) that needs to be updated.</param>
            <param name="target">The object that provides the member that is
            being updated.</param>
            <param name="memberValue">The value to be assigned to the field or
            property that is being updated.</param>
            <exception cref="T:System.InvalidOperationException">If the <paramref name="memberInfo"/>
            if neither a <see cref="T:System.Reflection.PropertyInfo"/> nor a <see cref="T:System.Reflection.FieldInfo"/>.</exception>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding`2.Dispose">
            <summary>
            Disposes the underlying bindings.
            </summary>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.LambdaBinding">
            <summary>
            A binding class that links two object graphs using
            lambda dependencies.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.#ctor">
            <summary>
            Internal constructor effectively seals the
            class for outside classes.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindOneWay``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a simple one-way binding that does not require
            type conversion.
            </summary>
            <typeparam name="T">The type of both source and target value.</typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if possible.</param>
            <returns>A binding object that manages the dependency on both <paramref name="source"/>
            and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindOneWay``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Creates a simple one-way binding that does not require
            type conversion.
            </summary>
            <typeparam name="T">The type of both source and target value.</typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if possible.</param>
            <param name="defaultValue">The default value to be assigned to the target if
            the source binding is broken.</param>
            <returns>A binding object that manages the dependency on both <paramref name="source"/>
            and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindOneWay``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Func{``0,``1})">
            <summary>
            Creates a simple one-way binding that performs an optional data conversion
            from source to target.
            </summary>
            <typeparam name="TSource">The type of the source value.</typeparam>
            <typeparam name="TTarget">The type of the target value.</typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if possible.</param>
            <param name="converter">An optional converter that performs type conversion from
            <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>. In case this
            parameter is null, the binding tries to perform an implicit cast.</param>
            <returns>A binding object that manages the dependency on both <paramref name="source"/>
            and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindOneWay``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Func{``0,``1},``1)">
            <summary>
            Creates a simple one-way binding that performs an optional data conversion
            from source to target.
            </summary>
            <typeparam name="TSource">The type of the source value.</typeparam>
            <typeparam name="TTarget">The type of the target value.</typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if possible.</param>
            <param name="converter">An optional converter that performs type conversion from
            <typeparamref name="TSource"/> to <typeparamref name="TTarget"/>. In case this
            parameter is null, the binding tries to perform an implicit cast.</param>
            <param name="defaultValue">The default value to be assigned to the target if
            the source binding is broken.</param>
            <returns>A binding object that manages the dependency on both <paramref name="source"/>
            and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindTwoWay``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Creates a simple two-way binding that does not require type
            conversions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if possible.</param>
            <returns>A binding object that manages the dependency on both <paramref name="source"/>
            and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindTwoWay``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Creates a simple two-way binding that does not require type
            conversions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if possible.</param>
            <param name="defaultValue">The default value to be assigned to the target if
            the source binding is broken.</param>
            <returns>A binding object that manages the dependency on both <paramref name="source"/>
            and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindTwoWay``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Creates a simple two-way binding between two objects.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if
            possible.</param>
            <param name="forwardConverter">An optional converter that performs
            type conversion from <typeparamref name="TSource"/> to
            <typeparamref name="TTarget"/> if the source was updated.
            In case this parameter is null, the binding tries to perform
            an implicit cast.</param>
            <param name="reverseConverter">An optional converter that performs
            type conversion from <typeparamref name="TTarget"/> to
            <typeparamref name="TSource"/> if the target was updated.
            In case this parameter is null, the binding tries to perform
            an implicit cast.</param>
            <returns>A binding object that manages the dependency on both 
            <paramref name="source"/> and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.BindTwoWay``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Func{``0,``1},System.Func{``1,``0},``1)">
            <summary>
            Creates a simple two-way binding between two objects.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TTarget"></typeparam>
            <param name="source">An expression that points to the source that is
            being observed.</param>
            <param name="target">The target node that is being updated if
            possible.</param>
            <param name="forwardConverter">An optional converter that performs
            type conversion from <typeparamref name="TSource"/> to
            <typeparamref name="TTarget"/> if the source was updated.
            In case this parameter is null, the binding tries to perform
            an implicit cast.</param>
            <param name="reverseConverter">An optional converter that performs
            type conversion from <typeparamref name="TTarget"/> to
            <typeparamref name="TSource"/> if the target was updated.
            In case this parameter is null, the binding tries to perform
            an implicit cast.</param>
            <param name="defaultValue">The default value to be assigned to the target if
            the source binding is broken.</param>
            <returns>A binding object that manages the dependency on both 
            <paramref name="source"/> and <paramref name="target"/> items.</returns>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.Bind``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``1}},System.Func{``0,``1},System.Func{``1,``0},``1,System.Boolean)">
            <summary>
            Creates the actual binding.
            </summary>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.LambdaBinding.Dispose">
            <summary>
            Disposes the binding.
            </summary>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.WeakEvents.WeakEvent`1">
            <summary>
            A class for managing a weak event.
            </summary>
        </member>
        <member name="T:Hardcodet.Util.Dependencies.WeakEvents.WeakEventProxy`1">
            <summary>
            An event handler wrapper used to create weak-reference event handlers, so that event subscribers 
            can be garbage collected without the event publisher interfering. 
            </summary>
            <typeparam name="TEventArgs">The type of event arguments used in the event handler.</typeparam>
            <remarks>
            To understand why this class is needed, see this page: 
                http://www.paulstovell.net/blog/index.php/wpf-binding-bug-leads-to-possible-memory-issues/
            For examples on how this is used, it is best to look at the unit test: 
                WeakEventProxyTests.cs
            </remarks>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.WeakEvents.WeakEventProxy`1.#ctor(System.EventHandler{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Hardcodet.Util.Dependencies.WeakEvents.WeakEventProxy`1"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.WeakEvents.WeakEventProxy`1.Handler(System.Object,`0)">
            <summary>
            Used as the event handler which should be subscribed to source collections.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Hardcodet.Util.Dependencies.WeakEvents.WeakEventProxy`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
    </members>
</doc>
